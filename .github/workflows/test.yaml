name: Test Host List Parsing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  regression-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - host: ssw-giga-04
            suite: atom-plus-4.robot
            num_device: 4
          - host: ssw-giga-05
            suite: atom-plus-8.robot
            num_device: 8
          - host: ssw-giga-06
            suite: atom-plus-16.robot
            num_device: 16
    outputs:
      host-list: ${{ steps.collect-hosts.outputs.host-list }}
    steps:
    - name: Set host information
      id: collect-hosts
      run: |
        echo "Matrix host: ${{ matrix.host }}"
        echo "host=${{ matrix.host }}" >> $GITHUB_OUTPUT
        echo "host-list=${{ matrix.host }}" >> $GITHUB_OUTPUT
        
    - name: Save host to file
      run: |
        echo "Saving host ${{ matrix.host }} to file"
        echo "${{ matrix.host }}" > host.txt
        
    - name: Upload host as artifact
      uses: actions/upload-artifact@v3
      with:
        name: host-${{ matrix.host }}
        path: host.txt
        retention-days: 1

  merge-result:
    needs: regression-test
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Get all hosts dynamically
      id: get-hosts
      uses: actions/github-script@v7
      with:
        script: |
          const jobs = await github.rest.actions.listJobsForWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId
          });
          
          const regressionJobs = jobs.data.jobs.filter(job => 
            job.name === 'regression-test' && 
            job.conclusion === 'success'
          );
          
          const hostList = regressionJobs.map(job => {
            // job nameÏóêÏÑú host Ï∂îÏ∂ú (host-ssw-giga-04 ÌòïÌÉú)
            const match = job.name.match(/host-(.+)/);
            return match ? match[1] : null;
          }).filter(host => host);
          
          console.log('Hosts found:', hostList);
          return hostList.join(' ');
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Test host list parsing logic
      run: |
        echo "=== Testing Host List Parsing Logic ==="
        
        echo "=== Method 1: From GitHub API ==="
        HOST_LIST='${{ steps.get-hosts.outputs.result }}'
        echo "Hosts from GitHub API: $HOST_LIST"
        
        if [ -n "$HOST_LIST" ] && [ "$HOST_LIST" != "null" ]; then
          echo "‚úÖ Parsed from GitHub API: $HOST_LIST"
        else
          echo "‚ùå No hosts found from GitHub API"
          echo "Trying job outputs as fallback..."
          
          # Fallback: job outputs ÏÇ¨Ïö©
          HOST_LIST_OUTPUT='${{ toJson(needs.regression-test.outputs.host-list) }}'
          echo "Raw output: $HOST_LIST_OUTPUT"
          
          if [ "$HOST_LIST_OUTPUT" != "null" ] && [ "$HOST_LIST_OUTPUT" != "[]" ] && [ -n "$HOST_LIST_OUTPUT" ]; then
            HOST_LIST="$HOST_LIST_OUTPUT"
            echo "‚úÖ Parsed from outputs: $HOST_LIST"
          else
            echo "‚ùå No hosts found"
            exit 1
          fi
        fi
        
        echo ""
        echo "üéØ Final host list: $HOST_LIST"
        echo "üéØ Host count: $(echo $HOST_LIST | wc -w)"
        
        # Ïã§Ï†ú ÏÇ¨Ïö© ÏòàÏãú
        echo ""
        echo "=== Usage Example ==="
        for host in $HOST_LIST; do
          echo "  Processing host: $host"
        done
        

        

