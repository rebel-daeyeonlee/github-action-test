name: Test Host List Parsing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  regression-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - host: ssw-giga-04
            suite: atom-plus-4.robot
            num_device: 4
          - host: ssw-giga-05
            suite: atom-plus-8.robot
            num_device: 8
          - host: ssw-giga-06
            suite: atom-plus-16.robot
            num_device: 16
    outputs:
      host-list: ${{ steps.collect-hosts.outputs.host-list }}
    steps:
    - name: Set host information
      id: collect-hosts
      run: |
        echo "Matrix host: ${{ matrix.host }}"
        echo "host=${{ matrix.host }}" >> $GITHUB_OUTPUT
        echo "host-list=${{ matrix.host }}" >> $GITHUB_OUTPUT
        
    - name: Append host to shared cache
      run: |
        echo "Appending host ${{ matrix.host }} to shared cache"
        echo "${{ matrix.host }}" >> all-hosts.txt
        
    - name: Cache all hosts
      uses: actions/cache/save@v3
      with:
        path: all-hosts.txt
        key: all-hosts-${{ github.run_id }}

  merge-result:
    needs: regression-test
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Restore all hosts from cache
      uses: actions/cache/restore@v3
      with:
        key: all-hosts-${{ github.run_id }}
        path: all-hosts.txt
        fail-on-cache-miss: false
        
    - name: Test host list parsing logic
      run: |
        echo "=== Testing Host List Parsing Logic ==="
        
        echo "=== Method 1: From shared cache ==="
        if [ -f "all-hosts.txt" ]; then
          echo "Reading hosts from shared cache..."
          cat all-hosts.txt
          echo ""
          
          HOST_LIST=$(cat all-hosts.txt | sort -u | tr '\n' ' ' | sed 's/ $//')
          echo "‚úÖ Parsed from shared cache: $HOST_LIST"
        else
          echo "‚ùå No shared cache found"
          echo "Trying job outputs as fallback..."
          
          # Fallback: job outputs ÏÇ¨Ïö©
          HOST_LIST_OUTPUT='${{ toJson(needs.regression-test.outputs.host-list) }}'
          echo "Raw output: $HOST_LIST_OUTPUT"
          
          if [ "$HOST_LIST_OUTPUT" != "null" ] && [ "$HOST_LIST_OUTPUT" != "[]" ] && [ -n "$HOST_LIST_OUTPUT" ]; then
            HOST_LIST="$HOST_LIST_OUTPUT"
            echo "‚úÖ Parsed from outputs: $HOST_LIST"
          else
            echo "‚ùå No hosts found"
            exit 1
          fi
        fi
        
        echo ""
        echo "üéØ Final host list: $HOST_LIST"
        echo "üéØ Host count: $(echo $HOST_LIST | wc -w)"
        
        # Ïã§Ï†ú ÏÇ¨Ïö© ÏòàÏãú
        echo ""
        echo "=== Usage Example ==="
        for host in $HOST_LIST; do
          echo "  Processing host: $host"
        done
        

        

